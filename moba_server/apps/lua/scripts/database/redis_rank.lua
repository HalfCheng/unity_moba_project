---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2020/11/21 18:32
---

local game_config = require("game_config")
local redis_conn = nil

local function redis_connect_to_rank()
    local host = game_config.redis_rank.host
    local port = game_config.redis_rank.port
    local db_index = game_config.redis_rank.db_index

    Redis.connect(host, port, function(err, conn)
        if err ~= nil then
            Logger.error(err)
            Scheduler.once(redis_connect_to_rank, 5000)
            return
        end

        redis_conn = conn

        Logger.debug("connect to redis rank db success!!!!")
        Redis.query(redis_conn, "select " .. db_index, function(err, ret)
            Logger.error("select db_idx")
        end)
    end)
end

redis_connect_to_rank()

-- redis 有序集合  专门用来做世界排行的有序集合
local WORLD_CHIP_RANK = "WORLD_CHIP_RANK"
local function flush_world_rank_with_uchip_inredis(uid, uchip)
    if (redis_conn == nil) then
        Logger.error("redis rank disconnected")
        return
    end

    local redis_cmd = "zadd WORLD_CHIP_RANK " .. uchip .. " " .. uid
    Redis.query(redis_conn, redis_cmd, function(err, ret)
        if err then
            Logger.error(err)
        end
    end)
end

--n：要刷的排行榜的数目
local function get_world_rank_with_uchip_inredis(n, ret_handler)
    if (redis_conn == nil) then
        Logger.error("redis rank disconnected")
        return
    end

    -- zrange 是从小到大排序
    -- zrevrange 从大到小
    local redis_cmd = "zrevrange WORLD_CHIP_RANK 0 " .. n   --从 0 到 n
    Redis.query(redis_conn, redis_cmd, function(err, ret)
        if err then
            Logger.error(err)
        end

        if ret == nil or #ret <= 0 then
            ret_handler(nil, nil)
            return
        end
        
        --获取得到的排行榜数据
        local rank_info = {}
        for k, v in pairs(ret) do
            rank_info[k] = tonumber(v)
        end

        if ret_handler then
            ret_handler(nil, rank_info)
        end
    end)
end

local redis_rank = {
    flush_world_rank_with_uchip_inredis = flush_world_rank_with_uchip_inredis,
    get_world_rank_with_uchip_inredis = get_world_rank_with_uchip_inredis
}

return redis_rank