---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2020/11/23 23:33
---游戏管理类
---

local Stype = require("Stype")
local Cmd = require("Cmd")
local Respones = require("Respones")
local mysql_game = require("database/mysql_game")
local redis_game = require("database/redis_game")
local player = require("logic_server/player")
local Zone = require("logic_server/Zone")
local match_mgr = require("logic_server/match_mgr")
local State = require("logic_server/State")

-- uid --->player
local logic_server_players = {}
local online_player_num = 0 --在线人数
local zone_wait_list = {} --等待列表
local zone_match_list = {} --当前开的比赛列表
zone_match_list[Zone.SGYD] = {}
zone_match_list[Zone.ASSY] = {}

local function send_status(s, stype, ctype, uid, status)
    local msg = { stype, ctype, uid, {
        status = status
    } }
    Session.send_msg(s, msg)
end

--搜索能够加入房间的房间号
local function search_inview_match_mgr(zid)
    local match_list = zone_match_list[zid]
    Logger.error("search_inview_match_mgr", zid)
    for k, v in ipairs(match_list) do
        if v.v_state == State.InView then
            return v
        end
    end

    local match = match_mgr:new()
    table.insert(match_list, match)
    match:init(zid)

    return match
end

local function login_logic(s, req)
    local uid = req[3]
    local stype = req[1]
    local p = logic_server_players[uid]
    --玩家对象已经在队列中, 更新一下session就可以了
    Logger.error("p == nil", p == nil, online_player_num)
    if p then
        p:set_session(s)
        send_status(s, stype, Cmd.eLoginLogicRes, uid, Respones.OK)
    else
        p = player:new()
        p:init(uid, s, function(status)
            Logger.error("player:init()", online_player_num, status)
            if status == Respones.OK then
                logic_server_players[uid] = p
                online_player_num = online_player_num + 1
            end
            send_status(s, Stype.Logic, Cmd.eLoginLogicRes, uid, status)
        end)
    end
end

--玩家离开了
local function on_player_disconnect(s, req)
    local uid = req[3]
    local p = logic_server_players[uid]
    if not p then
        return
    end

    --游戏中的玩家我们后续考虑
    if p.v_zid ~= -1 then
        --玩家在等待列表里面，则移除
        if zone_wait_list[p.v_zid][uid] then
            zone_wait_list[p.v_zid][uid] = nil
            p.zid = -1
            return
        end
    end
    --end

    --玩家断线离开中
    if p then
        Logger.error("on_player_disconnect", online_player_num)
        logic_server_players[uid] = nil
        online_player_num = online_player_num - 1
    end
    --end
end

--网关断线
local function on_gateway_disconnect(s)
    for i, v in pairs(logic_server_players) do
        v:set_session(nil)
    end
end

--网关连接
local function on_gateway_connect(s)
    print("on_gateway_connect")
    for i, v in pairs(logic_server_players) do
        v:set_session(s)
    end
end

---加入等待列表
local function enter_zone(s, req)
    local stype = req[1]
    local uid = req[3]

    Logger.error("enter_zone", uid)
    
    local p = logic_server_players[uid]

    if not p or p.v_zid ~= -1 then
        send_status(s, stype, Cmd.eEnterZoneRes, uid, Respones.InvalidOpt)
        Logger.error("return")
        return
    end

    local zid = req[4].zid;
    if zid ~= Zone.SGYD and zid ~= Zone.ASSY then
        send_status(s, stype, Cmd.eEnterZoneRes, uid, Respones.InvalidParams)
        Logger.error("return")
        return
    end

    if not zone_wait_list[zid] then
        zone_wait_list[zid] = {}
    end

    zone_wait_list[zid][uid] = p
    p.v_zid = zid
    send_status(s, stype, Cmd.eEnterZoneRes, uid, Respones.OK)
end

--定时检查匹配列表
local function do_match_players()
    for zid, wait_list in pairs(zone_wait_list) do
        for i, v in pairs(wait_list) do
            local match = search_inview_match_mgr(zid)
            if match then
                if not match:enter_player(v) then
                    Logger.error("match system error!!! : player state: ", v.v_state)
                else
                    wait_list[i] = nil
                end
            end
        end
    end
end

--启动一个定时器
Scheduler.schedule(do_match_players, 1000, -1, 5000)
--end

local game_mgr = {
    login_logic = login_logic,
    on_player_disconnect = on_player_disconnect,
    on_gateway_disconnect = on_gateway_disconnect,
    on_gateway_connect = on_gateway_connect,
    enter_zone = enter_zone,
}

return game_mgr